---
name: Check, build and test Python package

env:
  PG_MAJOR: "16"
  # Enable forward compatibility with newer versions of Python
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: "1"

"on":
  push:
  pull_request:
  schedule:
    - cron: '0 6 * * *'    # Daily 6AM UTC build

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest

    # Steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Style checks (ruff)
        if: always()
        run: |
          make ruff PYTHON=python
      - name: Style checks (djlint)
        if: always()
        run: |
          make djlint PYTHON=python
      - name: Style checks (yamllint)
        if: always()
        run: |
          make yamllint PYTHON=python
      - name: codespell
        if: always()
        run: |
          codespell

  build:
    name: Ubuntu-latest (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
      fail-fast: false

    # Steps to perform in job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # Due to pypi's gpg v1.10.0 needing libgpgme-dev < 1.18.0-3 as gpgme-config being removed
      - name: Install PyPi GPG backward compatibility hacks
        run: |
          set -x
          mkdir -pv "$HOME/.local/bin"
          cp -vr ./scripts/* "$HOME/.local/bin/"
          echo "$HOME/.local/bin" | tee -a $GITHUB_PATH
      - name: Install dependencies (apt)
        run: |
          sudo apt -y update
          sudo apt -y install devscripts bzr protobuf-compiler libapt-pkg-dev \
            libgpg-error-dev libgpgme-dev subunit yamllint python3-wheel \
            libjs-jquery-datatables postgresql-$PG_MAJOR \
            postgresql-$PG_MAJOR-debversion libssl-dev pkg-config codespell libtdb-dev
      - name: Install dependencies (pip)
        run: |
          python -m pip install --upgrade pip setuptools setuptools-protobuf \
            setuptools-rust wheel mypy-protobuf \
            python_apt@git+https://salsa.debian.org/apt-team/python-apt.git@2.5.0
      - name: PIP install & setup
        run: |
          pip install -U -e .[dev,debian]
          python setup.py develop
          python setup.py build_ext -i
      - name: Make
        run: |
          make
      - name: Typing checks
        if: always()
        run: |
          make typing PYTHON=python
      - name: Make all
        run: |
          make all PYTHON=python

  test:
    name: Tests
    needs: build
    runs-on: ubuntu-latest

    # Steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test suite run
        run: |
          make test PYTHON=python
        env:
          PYTHONHASHSEED: random
      - name: Rust style checks (rustfmt)
        if: always()
        run: |
          set -x
          cargo fmt --check --all
      - name: codespell
        run: |
          codespell
      - name: Config compat test
        if: always()
        run: |
          git clone https://salsa.debian.org/janitor-team/janitor.debian.net/ \
            janitor.debian.net
          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python PYTHONPATH=py \
            python3 -m janitor.config janitor.debian.net/k8s/janitor.conf
